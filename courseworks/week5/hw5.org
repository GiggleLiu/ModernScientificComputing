#+TITLE: Homework 5
#+AUTHOR: Yusheng Zhao

* Problem 1
** A)
This is a 4-by3 square matrix. So we need *three* Householder Transformations to
turn each part of the $j_{th}$ column below $j_{th}$ row to all zero.
** B)
#+begin_src  julia
struct HouseholderMatrix{T} <: AbstractArray{T, 2}
	v::Vector{T}
	β::T
end
Base.size(A::HouseholderMatrix) = (length(A.v), length(A.v))
Base.size(A::HouseholderMatrix, i::Int) = i == 1 || i == 2 ? length(A.v) : 1
# the `mul!` interfaces can take two extra factors.
function left_mul!(B, A::HouseholderMatrix)
	B .-= (A.β .* A.v) * (A.v' * B)
	return B
end
# the `mul!` interfaces can take two extra factors.
function right_mul!(A, B::HouseholderMatrix)
	A .= A .- (A * (B.β .* B.v)) * B.v'
	return A
end
Base.inv(A::HouseholderMatrix) = A
Base.adjoint(A::HouseholderMatrix) = A
Base.getindex(A::HouseholderMatrix, i::Int, j::Int) = A.β * A.v[i] * conj(A.v[j])
function householder_matrix(v::AbstractVector{T}) where T
	v = copy(v)
	v[1] -= norm(v, 2)
	return HouseholderMatrix(v, 2/norm(v, 2)^2)
end
function householder_qr!(Q::AbstractMatrix{T}, a::AbstractMatrix{T}) where T
	m, n = size(a)
	@assert size(Q, 2) == m
	if m == 1
		return Q, a
	else
		# apply householder matrix
		H = householder_matrix(view(a, :, 1))
		left_mul!(a, H)
        display(view(a,:,1))
		# update Q matrix
		right_mul!(Q, H')
		# recurse
		householder_qr!(view(Q, 1:m, 2:m), view(a, 2:m, 2:n))
	end
	return Q, a
end
A  = [1.0 1.0 1.0; 1.0 2.0 4.0; 1.0 3.0 9.0; 1.0 4.0 16.0]
Q = Matrix{Float64}(I,4,4)
#+end_src
Using the above code, mostly copied from course notebook, the first column of
$A$ is $[2.0 0 0 0]^{T}$
** C)
Using the same code, the second column of $A$ after two Householder
Transformation is $[5.0 2.23607 0 0]^{T}$. If you are intended to ask about the
first column, it should not change.
** D)
You will need $(4-1) + (3-1) + (2-1) +(1-1) =6$ rotations.

* Problem 2
Work done in file [[file:given_trisym.jl][here]].
